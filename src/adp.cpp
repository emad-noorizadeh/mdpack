/**
 * This program uses mdpack to setup and run simulation of
 * alanin dipeptide.
 * Required file are:
 * adp.config  (configuration parameters for the simulation)
 * adp.pdb     (NAMD pdp file generated by stand alone psfgen application)
 * adp.psf     (NAMD psf file generated by stand alone psfgen application)
 * 
 * To compile type:
 * make
 * To run, type:
 * ./adp Nsteps ( where Nsteps is the integer value, representing 
 *  the number of steps you want to run the simulation for, the step size 
 *  can be changed using adp.config )
 */

/*
    Copyright (C) 2012  Emad Noorizadeh   emad.noorizadeh@gmail.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "md.h"
#include "methods.h"
using namespace mdpack;

int main( int argc, char ** argv )
{
  
  // defining parameters pdb and psf file
  char psf  [] ="adp.psf";
  char pdb  [] ="adp.pdb";
  char prm  [] ="par_all22_prot.prm";  
  char conf [] ="adp.config";  
  // number of steps of simulation
  int nSteps=0;
  if(argc ==2)
    nSteps = atoi(argv[1]);
  else{
    std::cout<<" You must give number of steps the you want to run "<<std::endl;
    return 1;
  }
 
  
  
  md adp;
  
  adp.readinpsf(psf);   
  adp.readinprm(prm);
  adp.readinpdb(pdb);
  adp.readinConfig(conf);
  adp.setup();
  adp.initVelocities();
  adp.printInfo();
//   for (int i=0; i<adp.nAtoms; i++)
//     for(int j=0; j< adp.nAtoms; j++)
//       adp.nonBondedPairs[i][j].print();
  
  //compute initial forces and energies
  adp.computeForces();
  //write initial position into pdb file at step 0 and time 0
  adp.writepdb(0,0);
  // print initial energies to std (standard output)
  adp.printEtitles();
  adp.printEnergies();
  
//   run verlet for nSteps and print energyies every 100 steps
  for (int i=0; i< nSteps; i++){
   // adp.verlet();
   // adp.langevin();
   // adp.langevin1();
   adp.noseHooverLangevin();
    if(i%200 ==0){
      adp.printEnergies();
    }
     
  }
 adp.writepdb(nSteps,nSteps*adp.timeStep);
//   
//   
  
return 0;
}//end of main


















